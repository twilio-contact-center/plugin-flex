import { progress } from 'flex-plugins-utils-logger';
import { CreateConfigurationOption } from 'flex-plugins-api-toolkit';

import * as flags from '../utils/flags';
import FlexPlugin, { FlexPluginFlags } from './flex-plugin';
import { createConfiguration as createConfigurationDocs } from '../commandDocs.json';

type Multiple = { multiple: true };

export interface CreateConfigurationFlags extends FlexPluginFlags {
  new: boolean;
  name?: string;
  'disable-plugin'?: string[];
  'enable-plugin'?: string[];
  description?: string;
}

export const nameFlag = {
  description: createConfigurationDocs.flags.name,
  default: `Autogenerated Release ${Date.now()}`,
  required: true,
  max: 100,
};

export const enablePluginFlag: Partial<flags.IOptionFlag<string[]>> & Multiple = {
  description: createConfigurationDocs.flags.enablePlugin,
  multiple: true,
  required: false,
  alias: 'plugin',
};

export const aliasEnablePluginFlag: Partial<flags.IOptionFlag<string[]>> & Multiple = { ...enablePluginFlag };
delete aliasEnablePluginFlag.alias;
aliasEnablePluginFlag.description = createConfigurationDocs.flags.plugin;

export const disablePluginFlag: Partial<flags.IOptionFlag<string[]>> & Multiple = {
  description: createConfigurationDocs.flags.disablePlugin,
  multiple: true,
  required: false,
};

export const descriptionFlag = {
  description: createConfigurationDocs.flags.description,
  default: createConfigurationDocs.defaults.description,
  required: true,
  max: 500,
};

const baseFlags = { ...FlexPlugin.flags };
// @ts-ignore
delete baseFlags.json;

/**
 * Creates a Configuration
 */
export default abstract class CreateConfiguration extends FlexPlugin {
  static flags = {
    ...baseFlags,
    new: flags.boolean({
      description: createConfigurationDocs.flags.new,
    }),
    name: flags.string(nameFlag),
    plugin: flags.string(aliasEnablePluginFlag),
    'enable-plugin': flags.string(enablePluginFlag),
    'disable-plugin': flags.string(disablePluginFlag),
    description: flags.string(descriptionFlag),
  };

  /**
   * Performs the actual task of validating and creating configuration. This method is also usd by release script.
   */
  protected async doCreateConfiguration() {
    return progress(`Creating configuration`, async () => this.createConfiguration(), false);
  }

  /**
   * Registers a configuration with Plugins API
   * @returns {Promise}
   */
  private async createConfiguration() {
    const option: CreateConfigurationOption = {
      name: this._flags.name as string,
      addPlugins: [],
      removePlugins: [],
      description: this._flags.description || '',
    };
    if (!this._flags.new) {
      option.fromConfiguration = 'active';
    }
    if (this._flags['enable-plugin']) {
      option.addPlugins = this._flags['enable-plugin'] as string[];
    }
    if (this._flags['disable-plugin']) {
      option.removePlugins = this._flags['disable-plugin'] as string[];
    }

    return this.pluginsApiToolkit.createConfiguration(option);
  }

  get _flags(): CreateConfigurationFlags {
    return this.parse(CreateConfiguration).flags;
  }
}
