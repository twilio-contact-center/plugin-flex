"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.warnHasLegacy = exports.deploySuccessful = void 0;
const flex_plugins_utils_logger_1 = require("flex-plugins-utils-logger");
const commandDocs_json_1 = require("../commandDocs.json");
/**
 * Prints the successful message of a plugin deployment
 */
exports.deploySuccessful = (logger) => (name, availability, deployedData) => {
    const defaultName = `Autogenerated Release ${Date.now()}`;
    logger.newline();
    logger.success(`ðŸš€ Plugin (${availability}) **${name}**@**${deployedData.nextVersion}** was successfully deployed using Plugins API`);
    logger.newline();
    // update this description
    logger.info('**Next Steps:**');
    logger.info(flex_plugins_utils_logger_1.singleLineString('Run {{$ twilio flex:plugins:release', `\\-\\-plugin ${name}@${deployedData.nextVersion}`, `\\-\\-name "${defaultName}"`, `\\-\\-description "${commandDocs_json_1.createConfiguration.defaults.description}"}}`, 'to enable this plugin on your Flex application'));
    logger.newline();
};
/**
 * Warns about having legacy plugins
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
exports.warnHasLegacy = (logger) => () => {
    const cmd = flex_plugins_utils_logger_1.coloredStrings.code('$ twilio flex:plugins:upgrade-plugin --remove-legacy-plugin');
    flex_plugins_utils_logger_1.boxen.warning(`You have a legacy bundle of this plugin. Remove it by running ${cmd}`);
};
exports.default = (logger) => ({
    deploySuccessful: exports.deploySuccessful(logger),
    warnHasLegacy: exports.warnHasLegacy(logger),
});
//# sourceMappingURL=deploy.js.map